@using Abp.Authorization.Users
@using Abp.Web.Mvc.Extensions
@model  TaawonMVC.Web.Models.Applications.ApplicationsViewModel
@{
    ViewBag.Title = "ApplicationForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    input[type="radio"] {
        display: inline;
    }
    input.invalid {
        background-color: #ffdddd;
    }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #526d89;
        color: #ffffff;
        border: none;
        padding: 7px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>

<h2>Application</h2>

<form id="regForm" action="@Url.Action("CreateApplication","Applications")" class="credit-card-div">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="tab">
                <div class="row ">
                    <div class="col-md-12">
                        <span class="help-block text-muted small-font">Full Name</span>
                        <input name="fullname" id="fullname" type="text" class="form-control" placeholder="Full Name" autocomplete="off" oninput="this.className = 'form-control'" />
                        <input type="hidden" id="buildingId" name="buildingId" value="1">
                    </div>
                </div>
                <div class="row ">
                    <div class="col-md-3 col-sm-3 col-xs-3">
                        <span class="help-block text-muted small-font"> Building Address</span>
                        <input oninput="this.className = 'form-control'" id="buildingadress" type="text" class="form-control" placeholder="Building Address" />
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-3">
                        <span class="help-block text-muted small-font">Building Number</span>
                        <input oninput="this.className = 'form-control'" id="buildingnumber" type="text" class="form-control" placeholder="Building Number" />
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-3">
                        <span class="help-block text-muted small-font"> Mobile Number</span>
                        <input oninput="this.className = 'form-control'" id="mobilenumber" type="text" class="form-control" placeholder="Mobile Number" />
                    </div>
                    <div class="col-md-3 col-sm-3 col-xs-3">
                        @*<img src="assets/img/1.png" class="img-rounded" />*@
                        <span class="help-block text-muted small-font"> Phone Number</span>
                        <input oninput="this.className = 'form-control'" id="phonenumber" type="text" class="form-control" placeholder="Phone Number" />
                    </div>
                    <br />
                </div>
            </div>
            <div class="tab">
                <div class="row ">
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        <span>Have you received previous funding/restoration ? : </span>
                        @Html.RadioButton("isThereFundingOrPreviousRestoration", 0, new { id = "no", @checked = true, onChange = "findselected()" })
                        @Html.Label("no", "No")

                        @Html.RadioButton("isThereFundingOrPreviousRestoration", 1, new { id = "yes", onChange = "findselected()" })
                        @Html.Label("yes", "Yes")
                    </div>
                    <div id="0" class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        @*<span class="help-block text-muted small-font">Building Number</span>*@
                        <input oninput="this.className = 'form-control'" disabled name="previousRestorationSource" id="previousRestorationSource" type="text" class="form-control" placeholder="Funding source" />
                    </div>
                </div>

                <div class="row ">
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        <span>Is there anyone interested in repairing the property? : </span>
                        @Html.RadioButton("isThereInterestedRepairingEntity", 0, new { id = "no1", @checked = true, onChange = "findselectedEntity()" })
                        @Html.Label("no1", "No")

                        @Html.RadioButton("isThereInterestedRepairingEntity", 1, new { id = "yes1", onChange = "findselectedEntity()" })
                        @Html.Label("yes1", "Yes")
                    </div>
                    <div id="0" class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        @*<span class="help-block text-muted small-font">Building Number</span>*@
                        <input oninput="this.className = 'form-control'" disabled name="interestedRepairingEntityName" id="interestedRepairingEntityName" type="text" class="form-control" placeholder="interested Repairing Entity" />
                    </div>
                </div>
                <div class="row ">
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        <span>@L("IsInHoush")</span>
                        @Html.DropDownListFor(m => Model.buildingOutput.isInHoush, Model.YesOrNo, htmlAttributes: new { @class = "form-control", @name = "IsInHoush", @id = "IsInHoush", @required = "true", onchange = "showMeHoushName(this);" })


                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-25">

                        <div class="form-line" id="idShowMeApplication" hidden>
                            <input type="text" name="HoushName" id="houshName" class="form-control" required maxlength="255" autocomplete="off" placeholder="Housh Name">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-5">
                        <h5>Property Information :</h5>
                    </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                            @{

                            }
                            <span>Property ownership : </span>
                            @foreach (var propertyOwnership in Model.PropertyOwnerShips)
                            {
                                if (propertyOwnership.Id == 1)
                                {
                                    @Html.RadioButton("PropertyOwnerShip", propertyOwnership.Id, new { id = "no1" + propertyOwnership.Id.ToString(), @checked = true, onChange = "findSelectedProperty()" })
                                    @Html.Label("no1" + propertyOwnership.Id.ToString(), propertyOwnership.propertyOwnershipName)
                                }
                                else
                                {
                                    @Html.RadioButton("PropertyOwnerShip", propertyOwnership.Id, new { id = "no1" + propertyOwnership.Id.ToString(), onChange = "findSelectedProperty()" })
                                    @Html.Label("no1" + propertyOwnership.Id.ToString(), propertyOwnership.propertyOwnershipName)
                                }
                            }
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col-md-12">
                            <span class="help-block text-muted small-font">Other Ownership Type</span>
                            <input name="otherOwnershipType" id="otherOwnershipType" type="text" class="form-control" placeholder="Other Ownership Type" oninput="this.className = 'form-control'" />
                        </div>
                    </div>
                </div>
            <div class="tab">
                <div class="row">
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        <span class="help-block text-muted small-font">Resident status</span>
                        <input name="residentstatus" id="residentstatus" type="text" class="form-control" placeholder="Other Ownership Type" oninput="this.className = 'form-control'" />
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6 p-t-5">
                        <span class="help-block text-muted small-font">Multi select kendo</span>
                        <input name="residentstatus" id="residentstatus" type="text" class="form-control" placeholder="Other Ownership Type" oninput="this.className = 'form-control'" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                        <h5>Type of intervention from the point of view of the beneficiary :</h5>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                        <span>Intervention Type : </span>
                        @foreach (var interventionType in Model.InterventionTypes)
                        {
                            if (interventionType.Id == 1)
                            {
                                @Html.RadioButton("interventionType", interventionType.Id, new { id = "no2" + interventionType.Id.ToString(), @checked = true, onChange = "findSelectedIntervention()" })
                                @Html.Label("no2" + interventionType.Id.ToString(), interventionType.InterventionName)
                            }
                            else
                            {
                                @Html.RadioButton("interventionType", interventionType.Id, new { id = "no2" + interventionType.Id.ToString(), onChange = "findSelectedIntervention()" })
                                @Html.Label("no2" + interventionType.Id.ToString(), interventionType.InterventionName)
                            }
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                        <span>Restoration Type : </span>
                        <span class="help-block text-muted small-font">Multi select kendo</span>
                        <input name="restorationType" id="restorationType" type="text" class="form-control" placeholder="Restoration Type to add multi select later" oninput="this.className = 'form-control'" />
                    </div>
                </div>


            </div>
            <div class="tab">
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                        <label for="propertyStatusDescription">Property Status Description :</label>
                        <textarea class="form-control" rows="5" id="propertyStatusDescription"></textarea>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12 p-t-15">
                        <label for="requiredRestoration">Required Restoration :</label>
                        <textarea class="form-control" rows="5" id="requiredRestoration"></textarea>
                    </div>
                </div>
            </div>
                <div class="row m-t-20 m-r-10">
                    @*<div class="col-md-6 col-sm-6 col-xs-6 pad-adjust">
                <input type="submit" class="btn btn-danger" value="CANCEL" />
            </div>
            <div class="col-md-6 col-sm-offset-11">
                <input type="submit" class="btn btn-warning " value="Next" />
            </div>*@
                    <div style="overflow:auto;">
                        <div style="float:right;">
                            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                            <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                        </div>
                    </div>
                </div>
                <div style="text-align:center;margin-top:40px;">
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                </div>
            </div>
        </div>
</form>

<script>
    function showMeHoushName(e) {
        var strdisplay = e.options[e.selectedIndex].value;
        var e = document.getElementById("idShowMeApplication");
        if (strdisplay == "False") {
            e.style.display = "none";
        } else {
            e.style.display = "block";
        }
    }
</script>

<script>


    // read property value from controler passed to the view .
    //-----------------------
    var FullNameArray = '@Html.Raw(Json.Encode(Model.fullNameArray))';//
    var jsonobj = JSON.parse(FullNameArray);
    var result = [];
    for (i in jsonobj)
        result.push(i, jsonobj[i]);
    //------------------------------



    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    autocomplete(document.getElementById("fullname"), result);


</script>
<script>

    document.getElementById("fullname").onchange = function () { PopulateFunction() };

    function PopulateFunction() {
        // alert("clicked");
        var BuildingId = document.getElementById("buildingId").value;
        $.ajax({
            type: 'GET',
            dataType: 'Json',
            url: abp.appPath + 'Applications/PopulateApplicationForm?buildingId=' + BuildingId,
            success: function (data) {
               
               
               // alert(data.buildingOutput.isInHoush);
                $('#buildingadress').val(data.buildingOutput.streetName);
                $('#buildingnumber').val(data.buildingOutput.buildingNo); IsInHoush
                $('#IsInHoush').val(data.buildingOutput.isInHoush);
                $('#houshName').val(data.buildingOutput.houshName);
            },
            error: function (xhr, ajaxOption, thorwnError) {
                alert(xhr.status);
                alert(thrownError);
            },
            processData: false,
            async: true
        });
    }

</script>
<script>
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the crurrent tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }
</script>
@*Enable Disable Text Filed up on selected value from radio button*@
<script>

    function findselected() {
        var radioValue = $("input[name='isThereFundingOrPreviousRestoration']:checked").val();
        if (radioValue == 1) {
            document.getElementById("previousRestorationSource").disabled = false;
        }
        else
        {
           
            document.getElementById("previousRestorationSource").disabled = true;
        }
        
        
    } 

    function findselectedEntity() {
        var radioValue = $("input[name='isThereInterestedRepairingEntity']:checked").val();
        if (radioValue == 1) {
            document.getElementById("interestedRepairingEntityName").disabled = false;
        }
        else {

            document.getElementById("interestedRepairingEntityName").disabled = true;
        }


    } 

    function findSelectedProperty() {
        var radioValue = $("input[name='PropertyOwnerShip']:checked").val();
        if (radioValue == 4) {
            document.getElementById("otherOwnershipType").disabled = false;
        }
        else {

            document.getElementById("otherOwnershipType").disabled = true;
        }


    } 

</script>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>

